
// Run command: go to the path "/home/basudeb/scyther-linux-v1.1.3"; open terminal;  then run scyther-gui.py; then open file and verify 

protocol QRAC-IoD(UserU, DroneDR, RA) {
	hashfunction H;
	const XOR: Function;
	const Mul: Function;
	const Add: Function;
	const Cha: Function;
	const Mod: Function;

	const alfa, s, ur, ud: Nonce;
	const id, idi: Nonce;
	
	
	// Registration Authority Role
	role RA{
        fresh s, rts, idi, yi, tidi, ur, ud, rtsi: Nonce;
        var d, a: Nonce;
        var id, q, hd: Nonce;
        recv_1(UserU, RA, {id, q}ur(UserU, RA));
        
        match(a, XOR(H(id, s), H(q, rts)));
        match(d, XOR(H(a), rts));
        match(hd, H(id));
        send_2(RA, UserU, {a}ur(RA, UserU));
        
        match(d, H(idi, s, yi, rtsi));
        send_3(RA, DroneDR, {tidi, idi, d, hd}ud(RA, DroneDR));
        
        send_4(RA, UserU, {tidi, idi}ur(RA, UserU));
	
	claim(RA, Alive);
        claim(RA, Nisynch);
        claim(RA, Niagree);
        claim(RA, Secret, s);
	};
	
	
	
	// User U's Role
	role UserU{
        fresh sigma, pw, x, ur, id: Nonce;
        var  v, q, astar,  xstar, a: Nonce;
        match(v, H(x, pw, id, sigma));
        match(q, XOR(v, x));
        

        //Send registration info
        send_1(UserU, RA, {id, q}ur(UserU, RA));


        recv_2(RA, UserU, {a}ur(RA, UserU));
        
        //Stored information
        match(astar, XOR(a, H(pw, sigma)));
        match(xstar, XOR(x, H(a, id, pw)));
      
        var idi, tidi: Nonce;
        
        recv_4(RA, UserU, {tidi, idi}ur(RA, UserU));
        
        //Login
        match(a, XOR(astar, H(pw, sigma)));
        match(x, XOR(xstar, H(a, id, pw)));
        
        
        //Authentication Phase
        fresh rc, fc, ts1: Nonce;
        var xc, mc, tc, tidi, id, hv, idi: Nonce;
        
        match(xc, Add(Mul(alfa, rc), Mul(2, fc)));
        match(hv, H(v, rc, ts1, id, x));
        match(mc, XOR((H(id), idi), hv));
	match(tc, H(mc, tidi, ts1, xc));
    
        send_5(UserU, DroneDR, tc, mc, ts1, xc, tidi);
        
        var skv, xi, ts2, wi, mi, skp, dh: Nonce;
        recv_6(DroneDR, UserU, skv, xi, mi, ts2, wi);
        
        fresh ts3, tidin: Nonce;
        var d, ri, tip, uip, tidist, ack: Nonce;
        
        match(tip, Mul(xi, rc)); 
        match(uip, Mod(tip, wi));
        match(dh, XOR(mi, H(tidi, idi, uip, ts2)));
        match(skp, H(hv, uip, dh, ts2, ts1));
        match(tidist, XOR(tidin, H(skp, ts3, tidi)));
        match(ack, H(tidin, skp, ts3, ts2));
        
        send_7(UserU, DroneDR, ack, tidist, ts3);
         
       
	//User U's claims
        claim(UserU, Alive);
        claim(UserU, Secret, pw);
        claim(UserU, Secret, sigma);
        claim(UserU, Secret, id); 
        claim(UserU, Secret, x);
        claim(UserU, Nisynch);
        claim(UserU, Niagree);
	};


	
	// Drone DR's Role
	role DroneDR{
        fresh ts2, ri, fi: Nonce;
        var xi, ti, wi, ui, mi, sk, skv: Nonce;
        var tidi, idi, id, d, hd, ud: Nonce;
        var xc, x, rc, v, tc, mc, hv, dh, ts1: Nonce;
                
      
        //receive registration info
          recv_3(RA, DroneDR, {tidi, idi, d, hd}ud(RA, DroneDR));

          recv_5(UserU, DroneDR, tc, mc, ts1, xc, tidi);
          
          match(hv, XOR(mc, (hd,idi)));
          match(xi, Add(Mul(alfa, ri), Mul(2, fi)));
          match(ti, Mul(xc, ri));
          match(wi, Cha(ti));
          match(ui, Mod(ti, wi));
          match(dh, H(d, ri, idi));
          match(mi, XOR(dh, H(tidi, idi, ui, ts2)));
          match(sk, H(hv, ui, dh, ts2, ts1));
          match(skv, H(sk, tidi, mi, ts2, ts1, wi, xi, xc));
          
          send_6(DroneDR, UserU, skv, xi, mi, ts2, wi);
          
          var ts3, ack, tidist: Nonce;
          recv_7(UserU, DroneDR, ack, tidist, ts3);

        //Drone DR's claims
        claim(DroneDR, Alive);
        claim(DroneDR, Secret, d);
        claim(DroneDR, Secret, idi);
        claim(DroneDR, Nisynch);
        claim(DroneDR, Niagree);
	};

}
